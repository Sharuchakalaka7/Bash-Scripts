#!/bin/bash

# Comment for printing usage of the script
usage() {
	echo "Usage: ./cs246update"
}


# Helper function for recCopy
# Returns the list of destination directory names based on the indent level of recCopy
getEntries() {
	if [ ${2} -eq 0 ]; then
		list=$(ls ${1} | egrep "^a[0-9]+$")
	else
		list=$(ls ${1})
	fi
}


# Helper function for recCopy
# Outputs the appropriate message for the current directory
printMessageLine() {
	# No indent level means at top level
	if [ ${3} -eq 0 ]; then
		if [ ! -e ${1} ]; then
			echo "NEW Assignment: ${2}" >> ${output}
		else
			echo "Updating Assignment: ${2}" >> ${output}
		fi
		return 0
	fi

	# Otherwise, at some subentry
	for (( i=0; i < ${3}; ++i )); do
		echo -n "  " >> ${output}
	done

	if [ ! -e ${1} ]; then
		echo "| New Entry: ${2}" >> ${output}
	else
		echo "| Updating Entry: ${2}" >> ${output}
	fi
	return 0
}


# Recursively copies files from 
recCopy() {

	# Initialize current recursive call
	if [ ${#} -ne 3 ]; then
		echo "Usage: recCopy {1: source directory} {2: destination directory} {3: indent level}"
		rm ${output}
		exit 2
	fi

	# Traverse through each ,subentry and recurse when needed (when subentry is a directory)
	getEntries ${1} ${3}
	for subentry in ${list}; do
		src=${1}/${subentry}
		dest=${2}/${subentry}

		# Any subentry that doesn't exist or differs from repo version should updated and
		# have a user-friendly message generated
		if [ ! -e ${dest} ]; then
			bool=0
		elif [ $(diff -qr ${src} ${dest} | wc -l) -ne 0 ]; then
			bool=0
		else
			bool=1
		fi

		if [ ${bool} -eq 0 ]; then
			printMessageLine ${dest} ${subentry} ${3}

			# Case 1: Source subentry is a file
			if [ -f ${src} ]; then
				cp ${src} ${dest}

			# Case 2: Destination subentry is an existing directory
			elif [ -d ${dest} ]; then
				recCopy ${src} ${dest} $(expr ${3} + 1)

			# Case 3: Otherwise (destination subentry should be a directory - does not exist)
			else
				mkdir ${dest}
				recCopy ${src} ${dest} $(expr ${3} + 1)
			fi
		fi
	done
}




#################
## MAIN SCRIPT ##
#################

# Accepts no parameters
if [ ${#} -ne 1 ]; then
	usage
	exit 1
fi

# Initialize necessary vars and files (directories named from home directory for recCopy)
repo="1225"
loc="${1}"
output=$(mktemp)

# Perform git pull on repository
cd ${repo}
git pull > /dev/null
cd ..

# Perform the recursive copy between the two files and output generated messages
recCopy ${repo} ${loc} 0
if [ $(cat ${output} | wc -l) -le 1 ]; then
	echo "Already up to date"
else
	cat ${output}
fi

# Exit safely
rm ${output}
exit 0
